<?php

namespace Sophokles\Dataset;

use Sophokles\Database\FieldType;

/**
 * @property typeText $identifier
 * @property typeText $password
 */
abstract class authDataset extends dataset
{
    protected function abstractInit(): void
    {
        $this->objTableScheme->addColumn('identifier', FieldType::VARCHAR)
            ->length(200)
            ->unique();

        $this->objTableScheme->addColumn('password', FieldType::VARCHAR)
            ->length(256);
    }

    public function login(string $identifier, string $password)
    {
        $this->clearFields();
        $tmpObj = clone $this;
        $tmpObj->getEntriesbyParam(['identifier' => $identifier]);
        do {

            if (password_verify($password, $tmpObj->password)) {

                $arrPVal = [];
                foreach ($this->primaryField as $colName) {
                    $arrPVal[] = $tmpObj->{$colName}->getVal();
                }

                return $this->getEntries($arrPVal);
            }

        } while ($tmpObj->moveNext());

        return 0;
    }

    public function save($noSort = false)
    {
        $tmpObj = clone $this;
        $arrPVal = [];
        foreach ($this->primaryField as $colName) {
            $arrPVal[] = $this->{$colName}->getVal();
        }

        $tmpObj->getEntries($arrPVal);

        if ($this->password->getVal() !== $tmpObj->password->getVal()) {
            $crypt = password_hash($this->password->getVal(), PASSWORD_BCRYPT);
            $this->password->setVal($crypt);
        }

        parent::save($noSort); // TODO: Change the autogenerated stub
    }
}